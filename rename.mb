ㅁ 자료구조 : 컴퓨터에서 자료를 정리하고 조직화하는 다양한 구조
ㅁ 선형자료구조 : 항목을 순서적으로 나열하여 저장하는 창고 ex)리스트,스택,큐,덱
ㅁ 비선형자료구조 : 항목들이 보다 복잡한 연결관계 ex) 트리 : 폴더와 같은 계층구조 / 그래프 : 다양한 문제해결을 위한 기본구조로 사용
ㅁ 알고리즘 : 자료구조를 이요해 문제를 해결하는 절차 / 프로그램 = 자료구조 + 알고리즘
<알고리즘의 조건>
	입력 : 0개 이상의 입력이 존재
	출력 : 1개 이상의 출력이 존재
	명백성 : 각 명령어의 의미는 모호하지 않고 명확해야한다.
	유한성 : 한정된 수의 단계 후에는 반드시 종료되어야 한다.
	유효성 : 각 명령어들은 실행 가능한 연산이어야한다.
(알고리즘의 기술 방법)
	자연어 : 읽기 쉽다. 단어들을 정확하게 정의하지 않으면 의미 모호.
	흐름도 : 직관적. 이해하기 시움. 복잡한 알고리즘 -> 상당히 복잡!
	유사코드 : 프로그램을 구현할 때의 여러가지 문제들을 감출 수 있음 . 알고리즘의 핵심적인 내용에만 집중 가능
	특정 언어 : 알고리즘의 가장 정확한 기술 가능, 구현시의 사항들이 알고리즘의 핵심적인 내용들의 이해를 방해 / 파이썬 : C나 자바보다 간결한 표현 가능
ㅁ 추상자료형 (ADT)
   프로그래머가 추상적으로 정의한 자료형 – 데이터 타입을 추상적(수학적)으로 정의 / 시스템의 핵심
적인 구조나 동작에만 집중
ㅁ 알고리즘의 성능분석
(실행 시간 측정) : 두개의 알고리즘의 실제 실행시간을 측정하는 것 / 실제로 구현하는 것 필요 / 동일 하드웨어 사용해야함.
(알고리즘의 복잡도 분석) : 직접 구현 X -> 수행시간 분석 / 알고리즘이 수행하는 연산의 횟수를 측정 & 비교 / 일반적으로 연산의 횟수는 n함수
ㅁ 시간 복잡도 : 산술,대입,비교,이동의 기본 연산 고려 / 알고리즘 수행에 필요한 연산의 개수 계산/ 입력의 개수 n에 대한 함수 -> 시간복잡도 함수, T(n)
ㅁ 공간 복잡도 : 수행 시 필요로 하는 메모리 공간 분석
ㅁ 빅오 표기법 : 차수가 가장 큰 항이 절대적인 영향 (다른 항들은 상대적 무시) / 두개의 함수 f(n)과 g(n)이 주어졌을때, 모든 n>n0에 대해 |f(n)| \le c|g(n)|을 만족하는 상수 c와 n0가 존재하면 f(n)=O(g(n)).
 O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!)
ㅁ 빅오메가 표기법 : 두개의 함수 f(n)과 g(n)이 주어졌을때, 모든 n>n0에 대해 |f(n)| \geq c|g(n)|을 만족하는 상수 c와 n0가 존재하면 f(n)=\Omega(g(n)).
<최선의 경우> : 수행시간이 가장 빠른 경우(의미 없음) / <평균의 경우> : 수행시간이 평균적(계산하기 어려움) / <최악의 경우> : 수행시간이 가장 늦은 경우(가장널리 사용, 중요한 의미 가짐) 

